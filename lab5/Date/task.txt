Задание 1
Вариант 5. До 220 баллов
Реализуйте класс CDate, моделирующий дату начиная с 1 января 1970 года. Каркас класса выглядит так:

// Месяц
enum class Month
{
    JANUARY = 1, FEBRUARY, MARCH, APRIL,
    MAY, JUNE, JULY, AUGUST, SEPTEMBER,
    OCTOBER, NOVEMBER, DECEMBER
};

// День недели
enum class WeekDay
{
    SUNDAY = 0, MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY
};

// Дата в формате день-месяц-год. Год в диапазоне от 1970 до 9999
class CDate
{
public:
    // инициализируем дату заданными днем, месяцем и годом.
    // примечание: год >= 1970
    CDate(unsigned day, Month month, unsigned year);

    // инициализируем дату количеством дней, прошедших после 1 января 1970 года
    // например, 2 = 3 января 1970, 32 = 2 февраля 1970 года и т.д.
    explicit CDate(unsigned timestamp);

    // Конструктор по умолчанию. Создаёт дату, равную 1 января 1970.
    CDate();

    // возвращает день месяца (от 1 до 31)
    unsigned GetDay()const;

    // возвращает месяц
    Month GetMonth()const;

    // возвращает год
    unsigned GetYear()const;

    // возвращает день недели
    WeekDay GetWeekDay()const;

    // возвращает информацию о корректности хранимой даты.
    // Например, после вызова CDate date(99, static_cast<Month>(99), 10983);
    // или после:
    // CDate date(1, January, 1970); --date;
    // метод date.IsValid() должен вернуть false;
    bool IsValid()const; // См. примечание
};
Допускается решение без метода IsValid, который усложняет реализацию операций над датой, если конструктор будет будет выбрасывать исключение, если ему переданы невалидные параметры. Тогда состояние даты всегда будет валидным.

Реализуйте конструкторы и методы класса Date, а также следующие операторы.

№	Оператор	Описание
1	++ (префиксная и постфиксная формы)	Переводит дату на следующий день
2	-- (префиксная и постфиксная формы)	Переводит дату на предыдущий день
3	+	Прибавляет к дате заданное целое количество дней. Например:
28/02/2010 + 3 = 03/03/2010
3 + 28/02/2010 = 03/03/2010
4	-	Реализовать 2 версии данного оператора:
1.Вычитает из даты заданное количество дней. Например:
01/01/2010 - 2 = 30/12/2009
2.Находит разность двух дат в днях. Например:
01/01/2010 - 30/12/2009 = 3
01/01/2010 - 03/01/2010 = -2
5	+=	<Дата> += <кол-во дней>
6	-=	<Дата> -= <кол-во дней>
7	<<	Оператор вывода даты в поток вывода в формате ДД.ММ.ГГГГ, либо INVALID, если дата является недопустимой
8	>>	Оператор ввода времени из потока ввода в формате ДД.ММ.ГГГГ, либо INVALID, если дата является недопустимой
9	== и !=	Проверка двух дат на равенство и неравенство
10	< и >	Проверка двух дат на строгое неравенство
11	<= и >=	Проверка двух дат на нестрогое неравенство
Результат применения данных операций к недопустимой дате не изменяет ее значения.

При выходе результата после выполнения операций за пределы диапазона 01:01:1970 – 31:12:9999 дата должна стать недопустимой.

Подсказка: данный класс будет проще реализовать, если вместо трех приватных переменных (день, месяц и год) вы будете использовать только одну единственную переменную для хранения количества дней после 1 января 1970 года и все операции производить над нею.

В процессе разработки класса использование подхода TDD обязательно. Без автоматических тестов работа будет принята с коэффициентом 0.5.